  trigger:
  - master

  pool:
    vmImage: 'Ubuntu-latest'
  
  variables:
    buildConfiguration: release

  steps:
  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'build'

  - task: DotNetCoreCLI@2
    displayName: 'Publish app'
    inputs:
      command: 'publish'
      publishWebProjects: true
      arguments: '--configuration $(buildConfiguration)  --output $(Build.ArtifactStagingDirectory)/codedeploy/app'
      zipAfterPublish: false

  - task: CopyFiles@2
    displayName: 'copy codedeploy artifacts'
    inputs:
      SourceFolder: 'codedeploy/'
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/codedeploy/'

  - task: ArchiveFiles@2
    displayName: 'create deployment package archive'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/codedeploy/'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: none 
      archiveFile: '$(Build.ArtifactStagingDirectory)/codedeploy.tar'
      replaceExistingArchive: true

  - task: CloudFormationCreateOrUpdateStack@1
    displayName: 'update cloudformation stack'
    inputs:
      awsCredentials: 'AWS CodeDeploy Bucket'
      regionName: 'us-east-1'
      stackName: 'Infra'
      templateSource: 'file'
      templateFile: 'cloudformation/aws-codedeploy.template'
      s3BucketName: 'ryan-warrener-codedeploy'

  - task: CodeDeployDeployApplication@1
    displayName: 'AWS CodeDeploy'
    inputs:
      awsCredentials: 'AWS CodeDeploy Bucket'
      regionName: 'us-east-1'
      applicationName: 'podcast-land'
      deploymentGroupName: 'linux-dg'
      deploymentRevisionSource: 'workspace'
      revisionBundle: '$(Build.ArtifactStagingDirectory)/codedeploy.tar'
      bucketName: 'ryan-warrener-codedeploy'