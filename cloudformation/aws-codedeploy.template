{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CodeDeploy infra",
  "Parameters": {
    "VPCID": {
      "Description": "VPC ID, e.g. 'vpc-16438e72'",
      "Type": "String",
      "Default": "vpc-09a94774"
    },
    "MyIp": {
      "Description": "Enter your IP address in CIDR notation, e.g. 100.150.200.225/32",
      "Type": "String",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$",
      "Default": "0.0.0.0/0"
    },
    "InstanceProfile": {
      "Description": "Use the full ARN for SimpleCodeDeployInstanceProfile or AdvancedCodeDeployInstanceProfile",
      "Type": "String",
      "Default": "SimpleCodeDeployInstanceProfile"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "The name of an existing EC2 KeyPair.",
      "Default": "MyPrivateKey"
    },
    "AZ": {
      "Description": "Comma delimited list of AvailabilityZones where the instances will be created",
      "Type": "CommaDelimitedList",
      "Default": "us-east-1a,us-east-1b,us-east-1c"
    },
    "PublicSubnets": {
      "Description": "Comma delimited list of public subnets",
      "Type": "CommaDelimitedList",
      "Default": "subnet-5028f171,subnet-92b0d2df,subnet-46e63919"
    },
    "InstanceType": {
      "Description": "Provide InstanceType to be used",
      "Type": "String",
      "ConstraintDescription": "Must be a valid EC2 instance type, such as t2.medium",
      "Default": "t2.micro"
    },
    "LinuxAMIID": {
      "Description": "Linux AMI ID",
      "Type": "AWS::EC2::Image::Id",
      "Default": "ami-0a0ddd875a1ea2c7f"
    },
    "WindowsAMIID": {
      "Description": "Windows AMI ID",
      "Type": "AWS::EC2::Image::Id",
      "Default": "ami-0f38562b9d4de0dfe"
    }
  },
  "Resources": {
    "WebSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "WebSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "-1",
            "ToPort": -1
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 80,
            "IpProtocol": "6",
            "ToPort": 80
          },
          {
            "CidrIp": {
              "Ref": "MyIp"
            },
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      }
    },
    "LinuxWebSNSTopic": {
      "Type": "AWS::SNS::Topic"
    },
    "LinuxWebASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Ref": "AZ"
        },
        "VPCZoneIdentifier": {
          "Ref": "PublicSubnets"
        },
        "MinSize": "3",
        "MaxSize": "3",
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": 600,
        "NotificationConfigurations": [
          {
            "TopicARN": {
              "Ref": "LinuxWebSNSTopic"
            },
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ]
          }
        ],
        "TargetGroupARNs": [
          {
            "Ref": "LinuxWebELBTargetGroup"
          }
        ],
        "DesiredCapacity": "3",
        "LaunchConfigurationName": {
          "Ref": "LinuxWebLaunchConfig"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "LinuxWebServer",
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "LinuxWebLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Ref": "LinuxAMIID"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "WebSecurityGroup"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n\n",
                "apt-get update\n\n",
                "apt-get install ruby -y\n\n",
                "apt-get install aws-cli -y\n\n",
                "cd ~\n\n",
                "wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install\n\n",
                "wget https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\n\n",
                "chmod +x ./install\n\n",
                "./install auto\n\n",
                "service codedeploy-agent start\n\n",
                "dpkg -i packages-microsoft-prod.deb\n\n",
                "apt-get update\n\n",
                "apt-get install -y apt-transport-https\n\n",
                "apt-get update\n\n",
                "apt-get install -y aspnetcore-runtime-3.1\n\n",
                "apt-get install -y nginx\n\n",
                "echo '<html>healthy!</html>' > /var/www/html/monitor.html\n\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "LinuxWebAutoscaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "LinuxWebASG"
        },
        "Cooldown": "300",
        "ScalingAdjustment": 1
      }
    },
    "LinuxWebAutoscaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "LinuxWebASG"
        },
        "Cooldown": "300",
        "ScalingAdjustment": -1
      }
    },
    "LinuxWebCloudWatchCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "SNS Notification and scale up if CPU Util is Higher than 90% for 10 mins",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": 300,
        "EvaluationPeriods": 2,
        "Threshold": 90,
        "AlarmActions": [
          {
            "Ref": "LinuxWebAutoscaleUpPolicy"
          },
          {
            "Ref": "LinuxWebSNSTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "LinuxWebASG"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "LinuxWebCloudWatchCPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "SNS Notification and scale down if CPU Util is less than 70% for 10 mins",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": 300,
        "EvaluationPeriods": 2,
        "Threshold": 70,
        "AlarmActions": [
          {
            "Ref": "LinuxWebAutoscaleDownPolicy"
          },
          {
            "Ref": "LinuxWebSNSTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "LinuxWebASG"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "LinuxWebELB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "WebSecurityGroup"
          }
        ],
        "Subnets": {
          "Ref": "PublicSubnets"
        },
        "Scheme": "internet-facing",
        "Tags": [
          {
            "Key": "Network",
            "Value": "public"
          }
        ]
      }
    },
    "LinuxWebELBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "LinuxWebELBTargetGroup",
        "Port": 8080,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "HealthCheckEnabled": true,
        "HealthCheckPath": "/monitor.html",
        "HealthCheckPort": "80",
        "HealthCheckIntervalSeconds": 6,
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "5"
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      }
    },
    "LinuxWebELBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Port": 80,
        "Protocol": "HTTP",
        "LoadBalancerArn": {
          "Ref": "LinuxWebELB"
        },
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "LinuxWebELBTargetGroup"
            }
          }
        ]
      }
    },
    "WindowsWebSNSTopic": {
      "Type": "AWS::SNS::Topic"
    },
    "WindowsWebASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Ref": "AZ"
        },
        "VPCZoneIdentifier": {
          "Ref": "PublicSubnets"
        },
        "MinSize": "3",
        "MaxSize": "3",
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": 600,
        "NotificationConfigurations": [
          {
            "TopicARN": {
              "Ref": "WindowsWebSNSTopic"
            },
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ]
          }
        ],
        "TargetGroupARNs": [
          {
            "Ref": "WindowsWebELBTargetGroup"
          }
        ],
        "DesiredCapacity": "3",
        "LaunchConfigurationName": {
          "Ref": "WindowsWebLaunchConfig"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "WindowsWebServer",
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "WindowsWebLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Ref": "WindowsAMIID"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "WebSecurityGroup"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>\n",
                "powershell.exe -Command Install-WindowsFeature -name Web-Server -IncludeManagementTools\n",
                "echo hello world > c:\\inetpub\\wwwroot\\index.html\n",
                "hostname >> c:\\inetpub\\wwwroot\\index.html\n",
                "if not exist \"c:\temp\" mkdir c:\temp\n",
                "powershell.exe -Command Read-S3Object -BucketName aws-codedeploy-us-east-1/latest -Key codedeploy-agent.msi -File c:\\temp\\codedeploy-agent.msi\n",
                "c:\\temp\\codedeploy-agent.msi /quiet /l c:\\temp\\host-agent-install-log.txt\n",
                "powershell.exe -Command Get-Service -Name codedeployagent\n",
                "</script>\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "WindowsWebAutoscaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WindowsWebASG"
        },
        "Cooldown": "300",
        "ScalingAdjustment": 1
      }
    },
    "WindowsWebAutoscaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WindowsWebASG"
        },
        "Cooldown": "300",
        "ScalingAdjustment": -1
      }
    },
    "WindowsWebCloudWatchCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "SNS Notification and scale up if CPU Util is Higher than 90% for 10 mins",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": 300,
        "EvaluationPeriods": 2,
        "Threshold": 90,
        "AlarmActions": [
          {
            "Ref": "WindowsWebAutoscaleUpPolicy"
          },
          {
            "Ref": "WindowsWebSNSTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WindowsWebASG"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "WindowsWebCloudWatchCPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "SNS Notification and scale down if CPU Util is less than 70% for 10 mins",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": 300,
        "EvaluationPeriods": 2,
        "Threshold": 70,
        "AlarmActions": [
          {
            "Ref": "WindowsWebAutoscaleDownPolicy"
          },
          {
            "Ref": "WindowsWebSNSTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WindowsWebASG"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "WindowsWebELB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "WebSecurityGroup"
          }
        ],
        "Subnets": {
          "Ref": "PublicSubnets"
        },
        "Scheme": "internet-facing",
        "Tags": [
          {
            "Key": "Network",
            "Value": "public"
          }
        ]
      }
    },
    "WindowsWebELBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "WindowsWebELBTargetGroup",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "HealthCheckEnabled": true,
        "HealthCheckIntervalSeconds": 15,
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 3,
        "VpcId": {
          "Ref": "VPCID"
        }
      }
    },
    "WindowsWebELBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Port": 80,
        "Protocol": "HTTP",
        "LoadBalancerArn": {
          "Ref": "WindowsWebELB"
        },
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "WindowsWebELBTargetGroup"
            }
          }
        ]
      }
    },
    "CodeDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "DeploymentGroupName": "linux-dg",
        "ApplicationName": "podcast-land",
        "AutoScalingGroups": [
          {
            "Ref": "LinuxWebASG"
          }
        ],
        "ServiceRoleArn": "arn:aws:iam::717576970747:role/CodeDeployServiceRole",
        "DeploymentStyle": {
          "DeploymentType": "IN_PLACE",
          "DeploymentOption": "WITH_TRAFFIC_CONTROL"
        },
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "LoadBalancerInfo": {
          "TargetGroupInfoList": [
            {
              "Name": "LinuxWebELBTargetGroup"
            }
          ]
        },
        "AutoRollbackConfiguration": {
          "Enabled": true,
          "Events": [
            "DEPLOYMENT_FAILURE"
          ]
        }
      }
    }
  },
  "Outputs": {
    "LinuxWebFQDN": {
      "Value": {
        "Fn::GetAtt": [
          "LinuxWebELB",
          "DNSName"
        ]
      }
    },
    "WindowsWebFQDN": {
      "Value": {
        "Fn::GetAtt": [
          "WindowsWebELB",
          "DNSName"
        ]
      }
    }
  }
}